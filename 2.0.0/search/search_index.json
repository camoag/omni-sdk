{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Omni SDK","text":"<p>Unofficial  SDK for Omni Analytics</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":""},{"location":"#pip","title":"pip","text":"<p><code>pip install omni-analytics-sdk</code></p>"},{"location":"#poetry","title":"poetry","text":"<p><code>poetry add omni-analytics-sdk</code></p>"},{"location":"#configuration","title":"Configuration","text":"<p>The following environment variables can be set to automatically configure classes so that kwargs do not need to be passed on instantiation.</p> Env Var Description Example OMNI_ORGANIZATION_NAME Name of your Omni organization. Can be found in <code>Admin -&gt; Settings -&gt; General</code> in the Omni UI acme OMNI_VANITY_DOMAIN Vanity Domain for your Omni instance. More info on vanity domains here. reporting.example.com OMNI_EMBED_SECRET Secret key for created dashboard embed urls. Can be found in <code>Admin -&gt; Embed -&gt; Admin</code>. vglUd1WblfyBSdBSMPj0KrxZcNUEZ1CC OMNI_API_KEY API key for authenticating requests to the REST API. Can be generated in <code>Admin -&gt; API Keys</code>. omni_osk_r0dvvwTfLkOC1QP6eomT..."},{"location":"#usage","title":"Usage","text":"<p>Visit the Dashboard Embedding or REST API Client pages for  usage information.</p>"},{"location":"api/OmniApiClient/","title":"omni.OmniApiClient","text":"<p>Class for interacting with the Omni REST API. There are low level functions for making direct requests to the API (get, post, put, delete). These methods take a \"path\" arg that is equivalent to the path given in the Omni API docs. The client also includes convenience methods for common tasks.</p> <p>Parameters:</p> Name Type Description Default <code>organization_name</code> <code>str | None</code> <p>Omni organization name. OMNI_ORGANIZATION_NAME environment variable will be used as a fallback.</p> <code>None</code> <code>api_key</code> <code>str | None</code> <p>Omni API key. OMNI_API_KEY environment variable will be used as a fallback.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>base_url</code> <p>Omni REST API base URL that paths will be appended to.</p> <code>api_key</code> <p>Omni API key.</p> Source code in <code>src/omni/client.py</code> <pre><code>class OmniApiClient:\n    \"\"\"Class for interacting with the Omni REST API. There are low level functions for making direct requests to the\n    API (get, post, put, delete). These methods take a \"path\" arg that is equivalent to the path given in the Omni\n    API docs. The client also includes convenience methods for common tasks.\n\n    Args:\n        organization_name: Omni organization name. OMNI_ORGANIZATION_NAME environment variable will be used as a fallback.\n        api_key: Omni API key. OMNI_API_KEY environment variable will be used as a fallback.\n\n    Attributes:\n        base_url: Omni REST API base URL that paths will be appended to.\n        api_key: Omni API key.\n    \"\"\"\n\n    def __init__(\n        self, organization_name: str | None = None, api_key: str | None = None\n    ) -&gt; None:\n        omni_config = OmniConfig(\n            required_attrs=[\"organization_name\", \"api_key\"],\n            organization_name=organization_name,\n            api_key=api_key,\n        )\n        self.base_url = f\"https://{omni_config.organization_name}.omniapp.co/api\"\n        self.api_key = omni_config.api_key\n\n    def refresh_model(self, model_id: str) -&gt; bool:\n        \"\"\"Refreshes this model to reflect the latest structures (schemas, views, fields) from the data source.\n        This will remove any structures that are no longer present in the source, but will not remove anything\n        created by users.\n\n        Args:\n            model_id (str): The ID of the Omni model to refresh.\n\n        Returns:\n            : True if successful.\n        \"\"\"\n        self.post(f\"/v0/model/{model_id}/refresh\")\n        return True\n\n    def get(self, path: str, params: dict | None = None) -&gt; dict:\n        \"\"\"Makes a GET request to the Omni REST API.\n\n        Args:\n            path: The path in the Omni REST API to make a GET request.\n            params: Query string parameters to use in the GET request.\n\n        Returns:\n            JSON response from the Omni REST API.\n        \"\"\"\n        return self._request(\"GET\", path, params=params)\n\n    def post(self, path: str, json_data: dict | None = None) -&gt; dict:\n        \"\"\"Makes a POST request to the Omni REST API.\n\n        Args:\n            path: The path in the Omni REST API to make a POST request.\n            json_data: Query string parameters to use in the POST request.\n\n        Returns:\n            JSON response from the Omni REST API.\n        \"\"\"\n        return self._request(\"POST\", path, json_data=json_data)\n\n    def put(self, path: str, json_data: dict | None = None) -&gt; dict:\n        \"\"\"Makes a PUT request to the Omni REST API.\n\n        Args:\n            path: The path in the Omni REST API to make a PUT request.\n            json_data: Query string parameters to use in the PUT request.\n\n        Returns:\n            JSON response from the Omni REST API.\n        \"\"\"\n        return self._request(\"PUT\", path, json_data=json_data)\n\n    def delete(self, path: str) -&gt; dict:\n        \"\"\"Makes a DELETE request to the Omni REST API.\n\n        Returns:\n            JSON response from the Omni REST API.\n        \"\"\"\n        return self._request(\"DELETE\", path)\n\n    def _get_url(self, path: str) -&gt; str:\n        return f\"{self.base_url.strip('/')}/{path.strip('/')}\"\n\n    def _request(\n        self,\n        method: Literal[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n        path: str,\n        json_data: dict | None = None,\n        params: dict | None = None,\n    ) -&gt; dict:\n        response = requests.request(\n            method=method,\n            headers={\"Authorization\": f\"Bearer {self.api_key}\"},\n            url=self._get_url(path),\n            json=json_data,\n            params=params,\n        )\n        response.raise_for_status()\n        return response.json()\n</code></pre>"},{"location":"api/OmniApiClient/#omni.OmniApiClient.delete","title":"<code>delete(path)</code>","text":"<p>Makes a DELETE request to the Omni REST API.</p> <p>Returns:</p> Type Description <code>dict</code> <p>JSON response from the Omni REST API.</p> Source code in <code>src/omni/client.py</code> <pre><code>def delete(self, path: str) -&gt; dict:\n    \"\"\"Makes a DELETE request to the Omni REST API.\n\n    Returns:\n        JSON response from the Omni REST API.\n    \"\"\"\n    return self._request(\"DELETE\", path)\n</code></pre>"},{"location":"api/OmniApiClient/#omni.OmniApiClient.get","title":"<code>get(path, params=None)</code>","text":"<p>Makes a GET request to the Omni REST API.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path in the Omni REST API to make a GET request.</p> required <code>params</code> <code>dict | None</code> <p>Query string parameters to use in the GET request.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>JSON response from the Omni REST API.</p> Source code in <code>src/omni/client.py</code> <pre><code>def get(self, path: str, params: dict | None = None) -&gt; dict:\n    \"\"\"Makes a GET request to the Omni REST API.\n\n    Args:\n        path: The path in the Omni REST API to make a GET request.\n        params: Query string parameters to use in the GET request.\n\n    Returns:\n        JSON response from the Omni REST API.\n    \"\"\"\n    return self._request(\"GET\", path, params=params)\n</code></pre>"},{"location":"api/OmniApiClient/#omni.OmniApiClient.post","title":"<code>post(path, json_data=None)</code>","text":"<p>Makes a POST request to the Omni REST API.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path in the Omni REST API to make a POST request.</p> required <code>json_data</code> <code>dict | None</code> <p>Query string parameters to use in the POST request.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>JSON response from the Omni REST API.</p> Source code in <code>src/omni/client.py</code> <pre><code>def post(self, path: str, json_data: dict | None = None) -&gt; dict:\n    \"\"\"Makes a POST request to the Omni REST API.\n\n    Args:\n        path: The path in the Omni REST API to make a POST request.\n        json_data: Query string parameters to use in the POST request.\n\n    Returns:\n        JSON response from the Omni REST API.\n    \"\"\"\n    return self._request(\"POST\", path, json_data=json_data)\n</code></pre>"},{"location":"api/OmniApiClient/#omni.OmniApiClient.put","title":"<code>put(path, json_data=None)</code>","text":"<p>Makes a PUT request to the Omni REST API.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path in the Omni REST API to make a PUT request.</p> required <code>json_data</code> <code>dict | None</code> <p>Query string parameters to use in the PUT request.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict</code> <p>JSON response from the Omni REST API.</p> Source code in <code>src/omni/client.py</code> <pre><code>def put(self, path: str, json_data: dict | None = None) -&gt; dict:\n    \"\"\"Makes a PUT request to the Omni REST API.\n\n    Args:\n        path: The path in the Omni REST API to make a PUT request.\n        json_data: Query string parameters to use in the PUT request.\n\n    Returns:\n        JSON response from the Omni REST API.\n    \"\"\"\n    return self._request(\"PUT\", path, json_data=json_data)\n</code></pre>"},{"location":"api/OmniApiClient/#omni.OmniApiClient.refresh_model","title":"<code>refresh_model(model_id)</code>","text":"<p>Refreshes this model to reflect the latest structures (schemas, views, fields) from the data source. This will remove any structures that are no longer present in the source, but will not remove anything created by users.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>The ID of the Omni model to refresh.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if successful.</p> Source code in <code>src/omni/client.py</code> <pre><code>def refresh_model(self, model_id: str) -&gt; bool:\n    \"\"\"Refreshes this model to reflect the latest structures (schemas, views, fields) from the data source.\n    This will remove any structures that are no longer present in the source, but will not remove anything\n    created by users.\n\n    Args:\n        model_id (str): The ID of the Omni model to refresh.\n\n    Returns:\n        : True if successful.\n    \"\"\"\n    self.post(f\"/v0/model/{model_id}/refresh\")\n    return True\n</code></pre>"},{"location":"api/OmniDashboardEmbedder/","title":"omni.OmniDashboardEmbedder","text":"<p>Factory class for building and signing dashboard embedding URLs.</p> <p>Parameters:</p> Name Type Description Default <code>organization_name</code> <code>str | None</code> <p>organization_name: Omni organization name. OMNI_ORGANIZATION_NAME environment variable will be used as a fallback.</p> <code>None</code> <code>embed_secret</code> <code>str | None</code> <p>Omni embed secret. OMNI_EMBED_SECRET environment variable will be used as a fallback.</p> <code>None</code> <code>vanity_domain</code> <code>str | None</code> <p>Vanity domain configured with Omni. Should not be fully qualified. OMNI_VANITY_DOMAIN environment variable will be used as a fallback.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>embed_login_url</code> <p>Base url of embedded dashboard urls.</p> <code>embed_secret</code> <p>Omni embed secret.</p> Source code in <code>src/omni/embed.py</code> <pre><code>class OmniDashboardEmbedder:\n    \"\"\"Factory class for building and signing dashboard embedding URLs.\n\n    Args:\n        organization_name: organization_name: Omni organization name. OMNI_ORGANIZATION_NAME environment variable will\n            be used as a fallback.\n        embed_secret: Omni embed secret. OMNI_EMBED_SECRET environment variable will be used as a fallback.\n        vanity_domain: Vanity domain configured with Omni. Should not be fully qualified. OMNI_VANITY_DOMAIN\n            environment variable will be used as a fallback.\n\n    Attributes:\n        embed_login_url: Base url of embedded dashboard urls.\n        embed_secret: Omni embed secret.\n    \"\"\"\n\n    class PrefersDark(Enum):\n        \"\"\"PrefersDark options\n\n        Attributes:\n            yes: true\n            no: false\n            system: system\n        \"\"\"\n\n        yes = \"true\"\n        no = \"false\"\n        system = \"system\"\n\n    class Theme(Enum):\n        \"\"\"Theme options\n\n        Attributes:\n            dawn: dawn\n            vibes: vibes\n            breeze: breeze\n            blank: blank\n        \"\"\"\n\n        dawn = \"dawn\"\n        vibes = \"vibes\"\n        breeze = \"breeze\"\n        blank = \"blank\"\n\n    def __init__(\n        self,\n        organization_name: str | None = None,\n        embed_secret: str | None = None,\n        vanity_domain: str | None = None,\n    ):\n        omni_config = OmniConfig(\n            required_attrs=[\"embed_secret\"],\n            organization_name=organization_name,\n            embed_secret=embed_secret,\n            vanity_domain=vanity_domain,\n        )\n        if not omni_config.vanity_domain and not omni_config.organization_name:\n            raise OmniConfigError(\n                \"You must pass the vanity_domain or organization_name arguments OR \"\n                \"set the OMNI_ORGANIZATION_NAME or OMNI_VANITY_DOMAIN environment variables.\"\n            )\n        embed_host = (\n            omni_config.vanity_domain\n            or f\"{omni_config.organization_name}.embed-omniapp.co\"\n        )\n        self.embed_login_url = f\"https://{embed_host}/embed/login\"\n\n        # Required to appease mypy. If embed_secret is missing an OmniConfigError will have already been raised by the OmniConfig class.\n        assert omni_config.embed_secret\n\n        self.embed_secret = omni_config.embed_secret\n\n    def build_url(\n        self,\n        content_path: str,\n        external_id: str,\n        name: str,\n        access_boost: bool | None = None,\n        connection_roles: dict | None = None,\n        custom_theme: dict | None = None,\n        entity: str | None = None,\n        filter_search_params: str | dict | None = None,\n        groups: list[str] | None = None,\n        link_access: bool | list[str] | None = None,\n        prefers_dark: PrefersDark | None = None,\n        theme: Theme | None = None,\n        user_attributes: dict | None = None,\n    ) -&gt; str:\n        \"\"\"Builds a signed dashboard embedding URL. For more information on the options see the [Omni Docs](\n        https://docs.omni.co/docs/embed/private-embedding#embed-url-customization-options)\n\n        Args:\n            content_path: Path pointing to the dashboard you wish to build a URL to embed.\n            external_id: Required parameter creating a unique ID. This can be any alphanumeric value.\n            name: Required parameter and can contain a non-unique name for the embed user's name property.\n            custom_theme: Allows you to stylize your embedded dashboard to your preferred colors.\n            access_boost: Boolean setting to enable Access Boost for the embedded dashboard.\n            connection_roles: Required. Defines the connection roles available for embed users. Restricted queriers can create new content, Viewers can only consume dashboards.\n            entity: An id to reference the entity the user belongs to. Commonly is the customer name or other\n                identifying organization for this user.\n            filter_search_params: Encoded string or a dict representing dashboard filter values . This can be derived\n                by copying the substring after the \"?\" from a dashboard URL with non-empty filter values or using the\n                `OmniFilterSet` helper class.\n            groups: An array of group names that allows you to associate the resulting embed user with existing groups on your Omni instance.\n            link_access: Allows you to customize which other Omni dashboards can be linked to from the embedded dashboard.\n                If set to True, all links on the embedded dashboard are permissed and shown. Alternatively, a list of\n                dashboard IDs can be passed (i.e. [\"abcd1234\", \"efgh5678\", \"ijkl9999\"]) to only permiss to specific\n                dashboard IDs. Finally, if the parameter is None, all links to other Omni dashboards are\n                restricted. Note that link URLs to anything other than an Omni Dashboard will be shown and permissed\n                regardless of the linkAccess parameter.\n            prefers_dark: Dark mode setting.\n            theme: Visual theming options.\n            user_attributes: Dictionary of attributes matching defined user attributes in your Omni account.\n\n        Returns:\n            : Signed dashboard embedding URL.\n        \"\"\"\n\n        # Preprocess some values before passing to URL object.\n        if link_access is True:\n            _link_access = \"__omni_link_access_open\"\n        elif isinstance(link_access, list):\n            _link_access = \",\".join(link_access)\n        elif not link_access:\n            _link_access = None\n        else:\n            raise ValueError(\n                \"link_access must be a list of dashboard IDs or True to allow links to all dashboards.\"\n            )\n\n        # Convert empty dicts and strings to None.\n        filter_search_params = filter_search_params or None\n\n        if isinstance(filter_search_params, dict):\n            filter_search_params = urllib.parse.urlencode(\n                filter_search_params, doseq=True\n            )\n\n        url = DashboardEmbedUrl(\n            base_url=self.embed_login_url,\n            contentPath=content_path,\n            externalId=external_id,\n            name=name,\n            accessBoost=\"true\" if access_boost else None,\n            connectionRoles=(\n                compact_json_dump(connection_roles) if connection_roles else None\n            ),\n            customTheme=compact_json_dump(custom_theme) if custom_theme else None,\n            entity=entity,\n            filterSearchParam=filter_search_params,\n            groups=compact_json_dump(groups) if groups else None,\n            linkAccess=_link_access,\n            prefersDark=prefers_dark.value if prefers_dark else None,\n            theme=theme.value if theme else None,\n            userAttributes=(\n                compact_json_dump(user_attributes) if user_attributes else None\n            ),\n            nonce=uuid.uuid4().hex,\n        )\n\n        self._sign_url(url)\n        return str(url)\n\n    def _sign_url(self, url: DashboardEmbedUrl) -&gt; None:\n        \"\"\"Creates a signature and adds it to the URL object.\"\"\"\n\n        # IMPORTANT: These must be in the correct order as documented here\n        # https://docs.omni.co/docs/embed/private-embedding#manually-generate-a-signature-and-url-hard-mode\n        blob_items = [\n            url.base_url,\n            url.contentPath,\n            url.externalId,\n            url.name,\n            url.nonce,\n            url.accessBoost,\n            url.connectionRoles,\n            url.customTheme,\n            url.entity,\n            url.filterSearchParam,\n            url.groups,\n            url.linkAccess,\n            url.prefersDark,\n            url.theme,\n            url.userAttributes,\n        ]\n        blob = \"\\n\".join([i for i in blob_items if i is not None])\n        hmac_hash = hmac.new(\n            self.embed_secret.encode(\"utf-8\"), blob.encode(\"utf-8\"), hashlib.sha256\n        ).digest()\n        url.signature = base64.urlsafe_b64encode(hmac_hash).decode(\"utf-8\")\n</code></pre>"},{"location":"api/OmniDashboardEmbedder/#omni.OmniDashboardEmbedder.PrefersDark","title":"<code>PrefersDark</code>","text":"<p>               Bases: <code>Enum</code></p> <p>PrefersDark options</p> <p>Attributes:</p> Name Type Description <code>yes</code> <p>true</p> <code>no</code> <p>false</p> <code>system</code> <p>system</p> Source code in <code>src/omni/embed.py</code> <pre><code>class PrefersDark(Enum):\n    \"\"\"PrefersDark options\n\n    Attributes:\n        yes: true\n        no: false\n        system: system\n    \"\"\"\n\n    yes = \"true\"\n    no = \"false\"\n    system = \"system\"\n</code></pre>"},{"location":"api/OmniDashboardEmbedder/#omni.OmniDashboardEmbedder.Theme","title":"<code>Theme</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Theme options</p> <p>Attributes:</p> Name Type Description <code>dawn</code> <p>dawn</p> <code>vibes</code> <p>vibes</p> <code>breeze</code> <p>breeze</p> <code>blank</code> <p>blank</p> Source code in <code>src/omni/embed.py</code> <pre><code>class Theme(Enum):\n    \"\"\"Theme options\n\n    Attributes:\n        dawn: dawn\n        vibes: vibes\n        breeze: breeze\n        blank: blank\n    \"\"\"\n\n    dawn = \"dawn\"\n    vibes = \"vibes\"\n    breeze = \"breeze\"\n    blank = \"blank\"\n</code></pre>"},{"location":"api/OmniDashboardEmbedder/#omni.OmniDashboardEmbedder.build_url","title":"<code>build_url(content_path, external_id, name, access_boost=None, connection_roles=None, custom_theme=None, entity=None, filter_search_params=None, groups=None, link_access=None, prefers_dark=None, theme=None, user_attributes=None)</code>","text":"<p>Builds a signed dashboard embedding URL. For more information on the options see the Omni Docs</p> <p>Parameters:</p> Name Type Description Default <code>content_path</code> <code>str</code> <p>Path pointing to the dashboard you wish to build a URL to embed.</p> required <code>external_id</code> <code>str</code> <p>Required parameter creating a unique ID. This can be any alphanumeric value.</p> required <code>name</code> <code>str</code> <p>Required parameter and can contain a non-unique name for the embed user's name property.</p> required <code>custom_theme</code> <code>dict | None</code> <p>Allows you to stylize your embedded dashboard to your preferred colors.</p> <code>None</code> <code>access_boost</code> <code>bool | None</code> <p>Boolean setting to enable Access Boost for the embedded dashboard.</p> <code>None</code> <code>connection_roles</code> <code>dict | None</code> <p>Required. Defines the connection roles available for embed users. Restricted queriers can create new content, Viewers can only consume dashboards.</p> <code>None</code> <code>entity</code> <code>str | None</code> <p>An id to reference the entity the user belongs to. Commonly is the customer name or other identifying organization for this user.</p> <code>None</code> <code>filter_search_params</code> <code>str | dict | None</code> <p>Encoded string or a dict representing dashboard filter values . This can be derived by copying the substring after the \"?\" from a dashboard URL with non-empty filter values or using the <code>OmniFilterSet</code> helper class.</p> <code>None</code> <code>groups</code> <code>list[str] | None</code> <p>An array of group names that allows you to associate the resulting embed user with existing groups on your Omni instance.</p> <code>None</code> <code>link_access</code> <code>bool | list[str] | None</code> <p>Allows you to customize which other Omni dashboards can be linked to from the embedded dashboard. If set to True, all links on the embedded dashboard are permissed and shown. Alternatively, a list of dashboard IDs can be passed (i.e. [\"abcd1234\", \"efgh5678\", \"ijkl9999\"]) to only permiss to specific dashboard IDs. Finally, if the parameter is None, all links to other Omni dashboards are restricted. Note that link URLs to anything other than an Omni Dashboard will be shown and permissed regardless of the linkAccess parameter.</p> <code>None</code> <code>prefers_dark</code> <code>PrefersDark | None</code> <p>Dark mode setting.</p> <code>None</code> <code>theme</code> <code>Theme | None</code> <p>Visual theming options.</p> <code>None</code> <code>user_attributes</code> <code>dict | None</code> <p>Dictionary of attributes matching defined user attributes in your Omni account.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Signed dashboard embedding URL.</p> Source code in <code>src/omni/embed.py</code> <pre><code>def build_url(\n    self,\n    content_path: str,\n    external_id: str,\n    name: str,\n    access_boost: bool | None = None,\n    connection_roles: dict | None = None,\n    custom_theme: dict | None = None,\n    entity: str | None = None,\n    filter_search_params: str | dict | None = None,\n    groups: list[str] | None = None,\n    link_access: bool | list[str] | None = None,\n    prefers_dark: PrefersDark | None = None,\n    theme: Theme | None = None,\n    user_attributes: dict | None = None,\n) -&gt; str:\n    \"\"\"Builds a signed dashboard embedding URL. For more information on the options see the [Omni Docs](\n    https://docs.omni.co/docs/embed/private-embedding#embed-url-customization-options)\n\n    Args:\n        content_path: Path pointing to the dashboard you wish to build a URL to embed.\n        external_id: Required parameter creating a unique ID. This can be any alphanumeric value.\n        name: Required parameter and can contain a non-unique name for the embed user's name property.\n        custom_theme: Allows you to stylize your embedded dashboard to your preferred colors.\n        access_boost: Boolean setting to enable Access Boost for the embedded dashboard.\n        connection_roles: Required. Defines the connection roles available for embed users. Restricted queriers can create new content, Viewers can only consume dashboards.\n        entity: An id to reference the entity the user belongs to. Commonly is the customer name or other\n            identifying organization for this user.\n        filter_search_params: Encoded string or a dict representing dashboard filter values . This can be derived\n            by copying the substring after the \"?\" from a dashboard URL with non-empty filter values or using the\n            `OmniFilterSet` helper class.\n        groups: An array of group names that allows you to associate the resulting embed user with existing groups on your Omni instance.\n        link_access: Allows you to customize which other Omni dashboards can be linked to from the embedded dashboard.\n            If set to True, all links on the embedded dashboard are permissed and shown. Alternatively, a list of\n            dashboard IDs can be passed (i.e. [\"abcd1234\", \"efgh5678\", \"ijkl9999\"]) to only permiss to specific\n            dashboard IDs. Finally, if the parameter is None, all links to other Omni dashboards are\n            restricted. Note that link URLs to anything other than an Omni Dashboard will be shown and permissed\n            regardless of the linkAccess parameter.\n        prefers_dark: Dark mode setting.\n        theme: Visual theming options.\n        user_attributes: Dictionary of attributes matching defined user attributes in your Omni account.\n\n    Returns:\n        : Signed dashboard embedding URL.\n    \"\"\"\n\n    # Preprocess some values before passing to URL object.\n    if link_access is True:\n        _link_access = \"__omni_link_access_open\"\n    elif isinstance(link_access, list):\n        _link_access = \",\".join(link_access)\n    elif not link_access:\n        _link_access = None\n    else:\n        raise ValueError(\n            \"link_access must be a list of dashboard IDs or True to allow links to all dashboards.\"\n        )\n\n    # Convert empty dicts and strings to None.\n    filter_search_params = filter_search_params or None\n\n    if isinstance(filter_search_params, dict):\n        filter_search_params = urllib.parse.urlencode(\n            filter_search_params, doseq=True\n        )\n\n    url = DashboardEmbedUrl(\n        base_url=self.embed_login_url,\n        contentPath=content_path,\n        externalId=external_id,\n        name=name,\n        accessBoost=\"true\" if access_boost else None,\n        connectionRoles=(\n            compact_json_dump(connection_roles) if connection_roles else None\n        ),\n        customTheme=compact_json_dump(custom_theme) if custom_theme else None,\n        entity=entity,\n        filterSearchParam=filter_search_params,\n        groups=compact_json_dump(groups) if groups else None,\n        linkAccess=_link_access,\n        prefersDark=prefers_dark.value if prefers_dark else None,\n        theme=theme.value if theme else None,\n        userAttributes=(\n            compact_json_dump(user_attributes) if user_attributes else None\n        ),\n        nonce=uuid.uuid4().hex,\n    )\n\n    self._sign_url(url)\n    return str(url)\n</code></pre>"},{"location":"api/OmniFilterDefinition/","title":"omni.OmniFilterDefinition","text":"<p>Defines an Omni dashboard filter. Used to populate an OmniFilterSet and generate the filter search params for an embedded dashboard URL.</p> <p>Parameters:</p> Name Type Description Default <code>field</code> <code>str</code> <p>Name of the Omni field a filter exists for. Generally a dot-path representing a dimension in a view.</p> required <code>type</code> <code>Type</code> <p>Type of the value to be filtered on.</p> required <code>operator</code> <code>Operator</code> <p>Type of filter operation to perform.</p> <code>equals</code> <p>Attributes:</p> Name Type Description <code>field</code> <code>str</code> <p>Name of the Omni field a filter exists for. Generally a dot-path representing a dimension in a view.</p> <code>type</code> <code>Type</code> <p>Type of the value to be filtered on.</p> <code>operator</code> <code>Operator</code> <p>Type of filter operation to perform.</p> Source code in <code>src/omni/embed.py</code> <pre><code>@dataclass\nclass OmniFilterDefinition:\n    \"\"\"Defines an Omni dashboard filter. Used to populate an OmniFilterSet and generate the filter search params\n    for an embedded dashboard URL.\n\n    Args:\n        field: Name of the Omni field a filter exists for. Generally a dot-path representing a dimension in a view.\n        type: Type of the value to be filtered on.\n        operator: Type of filter operation to perform.\n\n    Attributes:\n        field: Name of the Omni field a filter exists for. Generally a dot-path representing a dimension in a view.\n        type: Type of the value to be filtered on.\n        operator: Type of filter operation to perform.\n\n    \"\"\"\n\n    class Type(Enum):\n        \"\"\"Omni Filter Type Options\n\n        Attributes:\n            number: number\n            string: string\n        \"\"\"\n\n        number = \"number\"\n        string = \"string\"\n\n    class Operator(Enum):\n        \"\"\"Omni Filter Operator Options\n\n        Attributes:\n            equals: EQUALS\n            less_than: LESS_THAN\n            greater_than: GREATER_THAN\n            less_than_or_equal = LESS_THAN_OR_EQUAL\n            greater_than_or_equal = GREATER_THAN_OR_EQUAL\n            contains = CONTAINS\n            between = BETWEEN\n            starts_with = STARTS_WITH\n            ends_with = ENDS_WITH\n        \"\"\"\n\n        equals = \"EQUALS\"\n        less_than = \"LESS_THAN\"\n        greater_than = \"GREATER_THAN\"\n        less_than_or_equal = \"LESS_THAN_OR_EQUAL\"\n        greater_than_or_equal = \"GREATER_THAN_OR_EQUAL\"\n        contains = \"CONTAINS\"\n        between = \"BETWEEN\"\n        starts_with = \"STARTS_WITH\"\n        ends_with = \"ENDS_WITH\"\n\n    field: str\n    type: Type\n    operator: Operator = Operator.equals\n    is_negative: bool = False\n\n    def get_filter_search_param_info(\n        self, values: str | int | float | list[str | int | float]\n    ) -&gt; tuple[str, list[str]]:\n        \"\"\"Returns the key and value to be used in a query string for an Omni Dashboard.\n\n        Args:\n            values: Value or list of values to filter on.\n\n        Returns:\n            : Key and value to use in the filter search params when building an embedded dashboard URL.\n        \"\"\"\n        if not isinstance(values, list):\n            values = [values]\n        filter_key = f\"f--{self.field}\"\n\n        is_inclusive = False\n\n        operator_kind = self.operator.value\n\n        if self.operator == self.Operator.greater_than_or_equal:\n            is_inclusive = True\n            operator_kind = self.Operator.greater_than.value\n        elif self.operator == self.Operator.less_than_or_equal:\n            is_inclusive = True\n            operator_kind = self.Operator.less_than.value\n\n        filter_value_param = {\n            \"is_negative\": self.is_negative,\n            \"kind\": operator_kind,\n            \"type\": self.type.value,\n            \"values\": values,\n        }\n\n        if self.type == self.Type.number:\n            filter_value_param[\"is_inclusive\"] = is_inclusive\n\n        filter_value = [json.dumps(filter_value_param)]\n        return filter_key, filter_value\n</code></pre>"},{"location":"api/OmniFilterDefinition/#omni.OmniFilterDefinition.Operator","title":"<code>Operator</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Omni Filter Operator Options</p> <p>Attributes:</p> Name Type Description <code>equals</code> <p>EQUALS</p> <code>less_than</code> <p>LESS_THAN</p> <code>greater_than</code> <p>GREATER_THAN</p> Source code in <code>src/omni/embed.py</code> <pre><code>class Operator(Enum):\n    \"\"\"Omni Filter Operator Options\n\n    Attributes:\n        equals: EQUALS\n        less_than: LESS_THAN\n        greater_than: GREATER_THAN\n        less_than_or_equal = LESS_THAN_OR_EQUAL\n        greater_than_or_equal = GREATER_THAN_OR_EQUAL\n        contains = CONTAINS\n        between = BETWEEN\n        starts_with = STARTS_WITH\n        ends_with = ENDS_WITH\n    \"\"\"\n\n    equals = \"EQUALS\"\n    less_than = \"LESS_THAN\"\n    greater_than = \"GREATER_THAN\"\n    less_than_or_equal = \"LESS_THAN_OR_EQUAL\"\n    greater_than_or_equal = \"GREATER_THAN_OR_EQUAL\"\n    contains = \"CONTAINS\"\n    between = \"BETWEEN\"\n    starts_with = \"STARTS_WITH\"\n    ends_with = \"ENDS_WITH\"\n</code></pre>"},{"location":"api/OmniFilterDefinition/#omni.OmniFilterDefinition.Type","title":"<code>Type</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Omni Filter Type Options</p> <p>Attributes:</p> Name Type Description <code>number</code> <p>number</p> <code>string</code> <p>string</p> Source code in <code>src/omni/embed.py</code> <pre><code>class Type(Enum):\n    \"\"\"Omni Filter Type Options\n\n    Attributes:\n        number: number\n        string: string\n    \"\"\"\n\n    number = \"number\"\n    string = \"string\"\n</code></pre>"},{"location":"api/OmniFilterDefinition/#omni.OmniFilterDefinition.get_filter_search_param_info","title":"<code>get_filter_search_param_info(values)</code>","text":"<p>Returns the key and value to be used in a query string for an Omni Dashboard.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>str | int | float | list[str | int | float]</code> <p>Value or list of values to filter on.</p> required <p>Returns:</p> Type Description <code>tuple[str, list[str]]</code> <p>Key and value to use in the filter search params when building an embedded dashboard URL.</p> Source code in <code>src/omni/embed.py</code> <pre><code>def get_filter_search_param_info(\n    self, values: str | int | float | list[str | int | float]\n) -&gt; tuple[str, list[str]]:\n    \"\"\"Returns the key and value to be used in a query string for an Omni Dashboard.\n\n    Args:\n        values: Value or list of values to filter on.\n\n    Returns:\n        : Key and value to use in the filter search params when building an embedded dashboard URL.\n    \"\"\"\n    if not isinstance(values, list):\n        values = [values]\n    filter_key = f\"f--{self.field}\"\n\n    is_inclusive = False\n\n    operator_kind = self.operator.value\n\n    if self.operator == self.Operator.greater_than_or_equal:\n        is_inclusive = True\n        operator_kind = self.Operator.greater_than.value\n    elif self.operator == self.Operator.less_than_or_equal:\n        is_inclusive = True\n        operator_kind = self.Operator.less_than.value\n\n    filter_value_param = {\n        \"is_negative\": self.is_negative,\n        \"kind\": operator_kind,\n        \"type\": self.type.value,\n        \"values\": values,\n    }\n\n    if self.type == self.Type.number:\n        filter_value_param[\"is_inclusive\"] = is_inclusive\n\n    filter_value = [json.dumps(filter_value_param)]\n    return filter_key, filter_value\n</code></pre>"},{"location":"api/OmniFilterSet/","title":"omni.OmniFilterSet","text":"<p>Helper class for generating a set of filter search parameters for an embedded dashboard. This class is designed to abstract the complexity of the Omni filters and create a simple interface for generating the filter values to be used by the OmniDashboardEmbedder.</p> <p>Parameters:</p> Name Type Description Default <code>**filters</code> <code>OmniFilterDefinition</code> <p>Arbitrary kwargs defining filter definitions. The kwarg is the name of the filter and defines the schema for the dict that should be passed to the get_filter_search_params method. The value for each kwarg is the OmniFilterDefinition object that will be used to translate the value to a viable Omni filter search param.</p> <code>{}</code> Source code in <code>src/omni/embed.py</code> <pre><code>class OmniFilterSet:\n    \"\"\"Helper class for generating a set of filter search parameters for an embedded dashboard. This class is designed\n    to abstract the complexity of the Omni filters and create a simple interface for generating the filter values to\n    be used by the OmniDashboardEmbedder.\n\n    Args:\n        **filters: Arbitrary kwargs defining filter definitions. The kwarg is the name of the filter and defines the\n            schema for the dict that should be passed to the get_filter_search_params method. The value for each kwarg is\n            the OmniFilterDefinition object that will be used to translate the value to a viable Omni filter search param.\n\n    \"\"\"\n\n    def __init__(self, **filters: OmniFilterDefinition) -&gt; None:\n        for value in filters.values():\n            if not isinstance(value, OmniFilterDefinition):\n                raise TypeError(\"Filters must be an OmniFilterDefinition object.\")\n        self._filters = filters\n\n    @property\n    def filters(self) -&gt; dict[str, OmniFilterDefinition]:\n        \"\"\"Filters in this filter set. This defines the schema of the dict that should be passed to the\n        `get_filter_search_params` method.\n        \"\"\"\n        # Using a property function here to discourage manipulating filters after instantiation.\n        return self._filters\n\n    def get_filter_search_params(\n        self, filter_values: dict[str, str | int | float]\n    ) -&gt; dict[str, list[str]]:\n        \"\"\"Given a dictionary of filter keys and values this function returns the dictionary of expected to populate\n        the filter_search_params kwarg when calling OmniDashboardEmbedder.build_url. This method is ideal for\n        translating query params in the encapsulating application to Omni filter search parameters.\n\n        Args:\n            filter_values: Dict where the keys are the filter names and values are the values to filter on. The\n                list of available filters can be found in the `filters` property.\n\n        Returns:\n            : Dict to be passed as the `filter_search_params` kwarg in the `OmniDashboardEmbedder.build_url` method.\n        \"\"\"\n        filter_search_params = {}\n        for query_param, value in filter_values.items():\n            omni_filter = self.filters[query_param]\n            filter_key, filter_value = omni_filter.get_filter_search_param_info(value)\n            filter_search_params[filter_key] = filter_value\n        return filter_search_params\n</code></pre>"},{"location":"api/OmniFilterSet/#omni.OmniFilterSet.filters","title":"<code>filters</code>  <code>property</code>","text":"<p>Filters in this filter set. This defines the schema of the dict that should be passed to the <code>get_filter_search_params</code> method.</p>"},{"location":"api/OmniFilterSet/#omni.OmniFilterSet.get_filter_search_params","title":"<code>get_filter_search_params(filter_values)</code>","text":"<p>Given a dictionary of filter keys and values this function returns the dictionary of expected to populate the filter_search_params kwarg when calling OmniDashboardEmbedder.build_url. This method is ideal for translating query params in the encapsulating application to Omni filter search parameters.</p> <p>Parameters:</p> Name Type Description Default <code>filter_values</code> <code>dict[str, str | int | float]</code> <p>Dict where the keys are the filter names and values are the values to filter on. The list of available filters can be found in the <code>filters</code> property.</p> required <p>Returns:</p> Type Description <code>dict[str, list[str]]</code> <p>Dict to be passed as the <code>filter_search_params</code> kwarg in the <code>OmniDashboardEmbedder.build_url</code> method.</p> Source code in <code>src/omni/embed.py</code> <pre><code>def get_filter_search_params(\n    self, filter_values: dict[str, str | int | float]\n) -&gt; dict[str, list[str]]:\n    \"\"\"Given a dictionary of filter keys and values this function returns the dictionary of expected to populate\n    the filter_search_params kwarg when calling OmniDashboardEmbedder.build_url. This method is ideal for\n    translating query params in the encapsulating application to Omni filter search parameters.\n\n    Args:\n        filter_values: Dict where the keys are the filter names and values are the values to filter on. The\n            list of available filters can be found in the `filters` property.\n\n    Returns:\n        : Dict to be passed as the `filter_search_params` kwarg in the `OmniDashboardEmbedder.build_url` method.\n    \"\"\"\n    filter_search_params = {}\n    for query_param, value in filter_values.items():\n        omni_filter = self.filters[query_param]\n        filter_key, filter_value = omni_filter.get_filter_search_param_info(value)\n        filter_search_params[filter_key] = filter_value\n    return filter_search_params\n</code></pre>"},{"location":"usage/api_client/","title":"REST API Client","text":"<p>The Omni SDK includes an easy-to-use REST API client that provides high-level methods for common tasks and low-level  methods for making requests directly to the REST endpoints.</p>"},{"location":"usage/api_client/#creating-the-client","title":"Creating the client","text":"<p>Configuration of the client can be handled using kwargs or environment variables. Examples of both are below.</p> Kwarg Configuration<pre><code>from omni import OmniApiClient\n\nclient = OmniApiClient(\n    organization_name=\"acme\", \n    api_key=\"omni_osk_r0dvvwTfLkOC1QP6eomT65yOIWtjfDsU5gZpvKNdKWxHSrDJPT1RAUyV\",\n)\n</code></pre> Environment Variable Configuration<pre><code>import os\nfrom omni import OmniApiClient\n\n# For demonstration purposes only. The assumption is that these env vars are already set.\nos.environ[\"OMNI_ORGANIZATION_NAME\"] = \"acme\"\nos.environ[\"OMNI_API_KEY\"] = \"omni_osk_r0dvvwTfLkOC1QP6eomT65yOIWtjfDsU5gZpvKNdKWxHSrDJPT1RAUyV\"\n\nclient = OmniApiClient()\n</code></pre>"},{"location":"usage/api_client/#usage-high-level","title":"Usage (High-Level)","text":"<p>Below you'll find instructions on how to use the convenience methods to execute high-level, common tasks.</p>"},{"location":"usage/api_client/#refresh-a-model","title":"Refresh a model","text":"<p>Refreshes a model to reflect the latest structures (schemas, views, fields) from the data source. This will remove any structures that are no longer present in the source, but will not remove anything created by users.</p> <pre><code>client.refresh_model(\"f0970eb8-785a-460b-9ced-cf603e160558\")\n</code></pre>"},{"location":"usage/api_client/#usage-low-level","title":"Usage (Low-Level)","text":"<p>Below you'll find instructions on how to use the low-level methods to interact directly with the Omni API.</p>"},{"location":"usage/api_client/#get-post-put-delete","title":"GET, POST, PUT, DELETE","text":"<p>There are methods available for making RESTful requests without having to deal with configuring the base url or  authentication. The <code>path</code> argument for these methods should be the url path starting from <code>http://&lt;OMNI_DOMAIN&gt;/api</code></p> RESTful Requests<pre><code># GET \nclient.get(\"/scim/v2/Users\")\n\n# POST\nclient.post(\"/scim/v2/Users\", json_data={\"displayName\": \"Somebody\", \"userName\": \"somebody\"})\n\n# PUT\nclient.put(\"/scim/v2/Groups/2208b2c2-ecc8-42ef-a576-caab9c1c58a7\", json_data={\"displayName\": \"Some Group\"})\n\n# DELETE\nclient.delete(\"/scim/v2/Users/2208b2c2-ecc8-42ef-a576-caab9c1c58a7\")\n</code></pre>"},{"location":"usage/dashboard_embedding/","title":"Dashboard Embedding","text":"<p>The SDK provides a convenience class for generating the url to embed dashboards in external pages and signing it. For more information on the options see the Omni Docs.</p>"},{"location":"usage/dashboard_embedding/#creating-the-embedder","title":"Creating the embedder","text":"<p>Configuration of the client can be handled using kwargs or environment variables. There is also the option to create the embedder using your organization name or a vanity domain, more info on these options is below.</p> Kwarg Configuration - Organization Name<pre><code>from omni import OmniDashboardEmbedder\n\nembedder = OmniDashboardEmbedder(organization_name=\"acme\", embed_secret=\"vglUd1WblfyBSdBSMPj0KrxZcNUEZ1CC\")\n</code></pre> Kwarg Configuration - Vanity Domain<pre><code>from omni import OmniDashboardEmbedder\n\nembedder = OmniDashboardEmbedder(vanity_domain=\"acme.example.com\", embed_secret=\"vglUd1WblfyBSdBSMPj0KrxZcNUEZ1CC\")\n</code></pre> Environment Variable Configuration - Organization Name<pre><code>import os\nfrom omni import OmniDashboardEmbedder\n\n# For demonstration purposes only. The assumption is that these env vars are already set.\nos.environ[\"OMNI_ORGANIZATION_NAME\"] = \"acme\"\nos.environ[\"OMNI_EMBED_SECRET\"] = \"vglUd1WblfyBSdBSMPj0KrxZcNUEZ1CC\"\n\nembedder = OmniDashboardEmbedder()\n</code></pre> Environment Variable Configuration - Vanity Domain<pre><code>import os\nfrom omni import OmniDashboardEmbedder\n\n# For demonstration purposes only. The assumption is that these env vars are already set.\nos.environ[\"OMNI_VANITY_DOMAIN\"] = \"acme.example.com\"\nos.environ[\"OMNI_EMBED_SECRET\"] = \"vglUd1WblfyBSdBSMPj0KrxZcNUEZ1CC\"\n\nembedder = OmniDashboardEmbedder()\n</code></pre>"},{"location":"usage/dashboard_embedding/#generating-a-dashboard-embedding-url","title":"Generating a dashboard embedding URL.","text":"<p>The embedder object has a single method that generates an embedding url and signs it. For more information on the options available please see the API Documentation for the class.</p> <pre><code>url = embedder.build_url(\n    content_path=\"/dashboards/da24491e\",\n    external_id=\"1\",\n    name=\"Somebody\",\n    custom_theme={\n        \"dashboard-background\": \"#00FF00\",\n        \"dashboard-tile-background\": \"#00FF00\",\n    },\n    entity=\"Acme\",\n    link_access=True,\n    filter_search_params='f--object.id=%7B\"is_inclusive\"%3Afalse%2C\"is_negative\"%3Afalse%2C\"kind\"%3A\"EQUALS\"%2C\"type\"%3A\"number\"%2C\"values\"%3A%5B\"1\"%5D%7D'\n    prefers_dark=OmniDashboardEmbedder.PrefersDark.yes,\n    theme=OmniDashboardEmbedder.Theme.dawn,\n    user_attributes={\"country\": \"USA\"},\n)\n</code></pre>"},{"location":"usage/dashboard_embedding/#organization-name-vs-vanity-domain","title":"Organization Name vs. Vanity Domain","text":"<p>The OmniDashboardEmbedder can be instantiated using either the <code>organization_name</code> or <code>vanity_domain</code> kwargs. Instantiating with <code>organization_name</code> uses the standard Omni endpoint for the embedded dashboard URL. Alternatively, Omni supports configuring a vanity domain to host embedded dashboards. You can learn about its advantages and setup instructions here. Once your vanity domain is set up, you can instantiate the OmniDashboardEmbedder with it to generate the correct URLs.</p>"},{"location":"usage/dashboard_embedding/#generating-filter-search-params","title":"Generating Filter Search Params","text":"<p>Note</p> <p>Support for dynamically generating filter search parameters is in early development and currently supports a limited set of filtering options. If you need specific filters that are not yet available, please create an issue.</p> <p>Omni dashboard embedding allows passing filter values in the query string for the embedded dashboard. These filters are represented as complex JSON-encoded strings. If the filter values you want to set are static, you can simply copy the query string value from the example above.</p> <p>For dynamically generating filter sets, the SDK provides a helper class, <code>OmniFilterSet</code>. This class is designed to translate simplified query string parameters from your application's requests into the correct Omni format.</p>"},{"location":"usage/dashboard_embedding/#example-generating-filter-search-params-in-a-flask-api-view","title":"Example: Generating filter search params in a Flask API view","text":"<p>The following example demonstrates how a Flask API view can generate a signed Omni embed URL. It defines a set of filters and uses the query string arguments from the request to create the appropriate filter search parameters for the embedded dashboard URL. Using the same names for the query string params and filter names in the <code>OmniFilterSet</code> allows you to pass the Flask <code>requests.args</code> directly.</p> myapp/views.py<pre><code>from myapp import app\nfrom flask import request\nfrom omni import OmniDashboardEmbedder, OmniFilterSet, OmniFilterDefinition\n\n\n@app.route(\"/omni_dashboard_url/\")\ndef get_omni_dashboard_url():\n    filter_set = OmniFilterSet(\n        latitude=OmniFilterDefinition(\n            field=\"address.latitude_filter\",\n            type=OmniFilterDefinition.Type.number,\n        ),\n        longitude=OmniFilterDefinition(\n            field=\"address.longitude_filter\",\n            type=OmniFilterDefinition.Type.number,\n        ),\n        distance=OmniFilterDefinition(\n            field=\"address.distance_selected_to_address_in_miles\",\n            type=OmniFilterDefinition.Type.number,\n            operator=OmniFilterDefinition.Operator.less_than,\n        ),\n    )\n\n    # Query string for this GET request - ?latitude=33.555&amp;longitude=-117.602&amp;distance=10\n    # request.args == {\"latitude\": 33.555, \"longitude\": -117.602, \"distance\": 10}\n    filter_search_params = filter_set.get_filter_search_params(request.args)\n\n    embedder = OmniDashboardEmbedder(organization_name=\"acme\", embed_secret=\"vglUd1WblfyBSdBSMPj0KrxZcNUEZ1CC\")\n    url = embedder.build_url(\n        content_path=\"/dashboards/da24491e\",\n        external_id=\"1\",\n        name=\"Somebody\",\n        filter_search_params=filter_search_params\n    )\n    return {\"url\": url}, 200\n</code></pre>"},{"location":"usage/dashboard_embedding/#defining-filters","title":"Defining Filters","text":"<p>To define a filter you instantiate an instance of the <code>OmniFilterDefinition</code> class with 3 arguments \u2013 field, type, and operator.</p> <p><code>field</code></p> <ul> <li>Name of the Omni field to be filtered. Generally a dot-path representing a dimension in a view.</li> <li>You must have already created a filter for this field in the Omni dashboard to be embedded.</li> </ul> <p><code>type</code></p> <ul> <li>Value type of the filter.</li> <li>Must pass an option from the OmniFilterDefinition.Type enum.</li> <li>Currently supported types - <code>number</code> and <code>string</code></li> </ul> <p><code>operator</code></p> <ul> <li>Type of filter operation to perform.</li> <li>Defaults to EQUALS.</li> <li>Must pass an option from the OmniFilterDefinition.Operator enum.</li> <li>Currently supported operators - <code>equals</code>, <code>less_than</code>, <code>greater_than</code>, <code>greater_than_or_equal</code>, <code>less_than_or_equal</code>, <code>between</code>, <code>contains</code>, <code>starts_with</code>, <code>ends_with</code></li> </ul> <p>In Omni, not all types support all operators. While there are no conflicts with the currently limited set of supported types and operators, this may change as more are added.</p> <p>The following types are supported for <code>number</code>:</p> <ul> <li>\u2705 Equals</li> <li>\u2705 Less than</li> <li>\u2705 Less than or equal</li> <li>\u2705 Greater than</li> <li>\u2705 Greater than or equal</li> <li>\u2705 Between</li> </ul> <p>The following types are supported for <code>string</code>:</p> <ul> <li>\u2705 Equals</li> <li>\u2705 Contains</li> <li>\u2705 Starts with</li> <li>\u2705 Ends with</li> </ul>"}]}